var express = require('express');
var router = express.Router();
const jwt = require('jsonwebtoken');
const multer  = require('multer')
const {initializeApp}  = require('firebase/app')
const {getStorage, ref, getDownloadURL, uploadBytesResumable}  = require('firebase/storage')
const { randomBytes } = require('crypto')
const fs = require('fs')
const { Staffs, getStaff } = require('../models/staffs');
const createHttpError = require("http-errors");
const TestCase = require('../models/testCase');
const auth = require('../middlewares/auth');

// USER-DETAILS : USER-DETAILS : USER-DETAILS : USER-DETAILS
router.get('/me',auth, async function(req,res,next){
    try {
        const currentUser = await getStaff(req.staff.id)
        return res.json(currentUser)
    } catch (error) {
        return res.status(401).send(error.message)
    }
})

/**
 * @swagger
 * components:
 *  schemas:
 *      Staff: 
 *          type: object
 *          required:
 *              -name
 *              -email
 *              -company
 *              -password
 *          properties:
 *              _id: 
 *                  type: string
 *                  description: Auto generated id of a staff
 *              name: 
 *                  type: string
 *                  description: Name of a staff
 *              email: 
 *                  type: string
 *                  description: Email of a staff
 *              company: 
 *                  type: string
 *                  description: Company of a staff
 *              uniqueid: 
 *                  type: string
 *                  description: Readable Id auto generated by software upon staff registration
 *              profilepic: 
 *                  type: string
 *                  description: A link gotten from firebase that stores staffs profile pictures
 *          example:
 *              _id: oijsai202490480
 *              name: Nguyen H'hen nie
 *              email: nguyennie@gmail.com
 *              company: Thang Industrials
 *              uniqueid: 2023-we32
 *              password: password
 *              profilepic: "https://firebase/jjredie?auepic"
 *              
 * 
 */

/**
 * @swagger
 * tags: 
 *      name: Staffs
 *      description: Staffs management api
 */

/**
 * @swagger
 * /staff:
 *  post: 
 *      summary: Create a new staff
 *      tags: [Staffs]
 *      requestBody:
 *          required: true
 *          content: 
 *              application/json:
 *                  schema:
 *                      $ref: '#/components/schemas/Staff'
 *      responses:
 *          200:
 *              description: Staff registration successful
 *              content: 
 *                  application/json:
 *                      schema:
 *                          $ref: '#/components/schemas/Staff'
 *          500:
 *              description: Some server error
 *      
 */

// CREATE_STAFF : CREATE_STAFF : CREATE_STAFF : CREATE_STAFF
router.post('/staff', async function(req,res,next){
    try {
       const {name, email, company, password} = req.body
       const date = new Date();
       const uniqueid = date.getFullYear() + "-" + randomBytes(2).toString("hex")
       let usedEmail = await Staffs.findOne({email : email})
       if(usedEmail){
           return res.status(403).send('Email already in use')
       }else{
           await Staffs.create({name, email, company, password, uniqueid});
           return res.status(200).send('Staff created successfully')
       }
    } catch (error) {
       return res.status(500).send("Server Error")
    }
})

/**
 * @swagger
 * /staff: 
 *   get:
 *      summary: Returns the list of all the staffs
 *      tags: [Staffs]
 *      responses:
 *          200: 
 *              description: The list of all the staffs
 *              content: 
 *                  application/json:
 *                      schema: 
 *                          type: array
 *                          items: 
 *                              $ref: '#/components/schemas/Staff' 
 * 
 */

/**
 * @swagger
 * /staff?edit:
 *    get:
 *      summary: Get a staff by Id
 *      tags: [Staffs]
 *      parameters:
 *        - in: query
 *          name: edit
 *          schema:
 *              type: string
 *          required: true
 *          description: The staff Id
 *      responses:
 *          200:
 *              description: The current staff
 *              content: 
 *                  application/json:
 *                      schema: 
 *                          type: array
 *                          items: 
 *                              $ref: '#/components/schemas/Staff'
 *          404: 
 *               description: Staff not found 
 * 
 */

// READ_STAFF : READ_STAFF : READ_STAFF : READ_STAFF
router.get('/staff', async function(req,res,next){
    try {
        const {edit,q,sortAsc,sortDsc} = req.query
        if(edit){
            let staffs = await Staffs.findById(edit)
            return res.json(staffs)
        }
        if(sortAsc){
            let staffs = await Staffs.find().sort({_id : sortAsc})
            return res.json(staffs)
        }
        if(sortDsc){
            let staffs = await Staffs.find().sort({_id : sortDsc})
            return res.json(staffs)
        }
        
        if(q){
            var regex = new RegExp(q, "i")
            let staffs = await Staffs.find({name:regex}).sort({_id : 'descending'})
            return res.json(staffs)
        }else{
            let staffs = await Staffs.find().sort({_id : 'descending'})
            return res.json(staffs)
        }
    } catch (error) {
        return res.status(404).send("Staff not found")
    }
})

/**
 * @swagger
 * /staff/{id}:
 *  put:
 *      summary: Update staff by Id
 *      tags: [Staffs]
 *      parameters:
 *        - in: path
 *          name: id
 *          schema:
 *              type: string
 *          required: true
 *          description: The staff Id
 *      requestBody:
 *          required: true
 *          content:
 *              application/json:
 *                  schema: 
 *                      $ref: '#/components/schemas/Staff'
 *      responses:
 *          200:
 *              description: Staff updated successfully
 *              content: 
 *                  application/json:
 *                      schema:
 *                          $ref: '#/components/schemas/Staff'
 *          404:
 *              description: Staff not found
 *          500:
 *              description: Server Error
 */

// UPDATE_STAFF
router.put('/staff/:id', async function(req, res, next) {
    try {
        const{ name, phonenumber, email, role, address, password, company } = req.body
        const id = req.params.id
        await Staffs.findByIdAndUpdate(id,{name, phonenumber, email, role, address, password, company})
        return res.status(200).send('Updated Successfully')
    } catch (error) {
        return res.status(401).send(error.message)
    }
});

/**
 * @swagger
 * /staff/{id}:
 *  delete:
 *      summary: Delete staff Id
 *      tags: [Staffs]
 *      parameters: 
 *        - in: path
 *          name: id
 *          schema:
 *              type: string
 *          required: true
 *          description: The Staff Id
 *      responses:
 *          200:
 *              description: Staff deleted successfully
 *          404: 
 *              description: Staff not found
 * 
 */

// DELETE_STAFF
router.delete('/staff/:id', async function(req, res, next) {
    try {
        const id = req.params.id
        await Staffs.findByIdAndRemove(id)
        return res.status(200).send('Deleted Successfully')
    } catch (error) {
        return res.status(401).send(error.message)
    }
});

// ACCOUNT-SETTINGS #PASSWORD
router.put('/updatepassword/:id', async function(req, res, next) {
    try {
        const{ oldpassword, newpassword, confirmnewpassword  } = req.body
        const id = req.params.id
        const currentStaff = await Staffs.findOne({_id : id})
        if(oldpassword !== currentStaff.password){
            return res.status(401).send('Incorrect Password')
        }
        if(newpassword !== confirmnewpassword || newpassword == ""){
            return res.status(401).send('passwords do not match')
        }else{
            await Staffs.findByIdAndUpdate(id,{password: newpassword})
        }
        return res.status(200).send('Password Updated Successfully')
    } catch (error) {
        return res.send(error)
    }
});

// READ_TEST-EXECUTION : READ_TEST-EXECUTION : READ_TEST-EXECUTION : READ_TEST-EXECUTION
router.get('/testexecution', async function(req,res,next){
    try {
        let testExecution = await TestCase.find({}, {status: 1}).sort({_id : 'descending'})
        return res.json(testExecution)
    } catch (error) {
        return res.status(401).send(error.message)
    }
})

module.exports = router